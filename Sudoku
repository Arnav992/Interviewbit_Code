bool check(vector<vector<char>> &A,int i,int j,char val){
    for(int k=0; k<A.size(); k++){
        // Row
        if((A[i][k])==val)return false;
        // Column
        if((A[k][j])==val)return false;
    }
    int x=(i/3)*3, y=(j/3)*3;

    for(int a=x; a<x+3; a++){
        for(int b=y; b<y+3; b++){
            if(A[a][b]==val)return false;
        }
    }
    return true;
}
bool solve(vector<vector<char> > &A,int x,int y){
    if(x==9)return true;
    if(y==9){
        return solve(A, x+1, 0);
    }
    if(A[x][y]!='.')return solve(A, x, y+1);

    for(char c='1'; c<='9'; c++){
        if(check(A, x, y, c)){
            A[x][y]=c;
            bool it=solve(A, x, y+1);
            if(it==true)return true;
            A[x][y]='.';
        }
    }
    return false;
}
void Solution::solveSudoku(vector<vector<char> > &A) {
    solve(A, 0, 0);
    return ;
}
